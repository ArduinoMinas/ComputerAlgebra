using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SyMath;

namespace Circuit
{
    /// <summary>
    /// Ideal current source.
    /// </summary>
    [CategoryAttribute("Standard")]
    [DisplayName("Current Source")]
    public class CurrentSource : TwoTerminal
    {
        private Quantity current = new Quantity(1, Units.A);
        [Description("Current generated by this current source.")]
        [Serialize]
        public Quantity Current { get { return current; } set { if (current.Set(value)) NotifyChanged("Current"); } }

        public CurrentSource() { Name = "I1"; }

        public override void Analyze(ModifiedNodalAnalysis Mna)
        {
            Mna.AddPassiveComponent(Anode, Cathode, Current);
        }

        protected override void DrawSymbol(SymbolLayout Sym)
        {
            int r = 10;
            Sym.AddWire(Anode, new Coord(0, r));
            Sym.AddWire(Cathode, new Coord(0, -r));

            Sym.AddCircle(EdgeType.Black, new Coord(0, 0), r);
            Sym.DrawArrow(EdgeType.Black, new Coord(0, -7), new Coord(0, 7), 0.2f);

            Sym.DrawText(Current.ToString(), new Point(r * 0.7, r * 0.7), Alignment.Near, Alignment.Near);
            Sym.DrawText(Name, new Point(r * 0.7, r * -0.7), Alignment.Near, Alignment.Far); 
        }

        public override string ToString() { return Name + " = " + Current.ToString(); }
    }
}
